// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Polls.Data;
using System;

namespace Polls.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190210174646_SecondCustom3")]
    partial class SecondCustom3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Polls.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Position");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Polls.Models.Candidate", b =>
                {
                    b.Property<string>("CandidateId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ElectionId");

                    b.Property<string>("MyImageUrl");

                    b.Property<string>("MyPromise");

                    b.Property<int>("TotalNumberOfVotes");

                    b.Property<string>("UserId");

                    b.HasKey("CandidateId");

                    b.HasIndex("ElectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Polls.Models.Election", b =>
                {
                    b.Property<string>("ElectionId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Completed");

                    b.Property<DateTime>("ElectionEnds");

                    b.Property<bool>("ElectionInProgress");

                    b.Property<string>("ElectionName");

                    b.Property<string>("ElectionPublishedMessage");

                    b.Property<DateTime>("ElectionStarts");

                    b.Property<string>("ExtraInformation");

                    b.Property<bool>("HasEnded");

                    b.Property<bool>("HasStarted");

                    b.Property<bool>("Tie");

                    b.HasKey("ElectionId");

                    b.ToTable("Elections");
                });

            modelBuilder.Entity("Polls.Models.ElectionWinner", b =>
                {
                    b.Property<string>("ElectionWinnerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CandidateId");

                    b.Property<string>("ElectionId");

                    b.HasKey("ElectionWinnerId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("ElectionId");

                    b.ToTable("ElectionWinners");
                });

            modelBuilder.Entity("Polls.Models.Grieviance", b =>
                {
                    b.Property<int>("GrievianceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CandidateId");

                    b.Property<bool>("HasBeenSeen");

                    b.Property<string>("Message");

                    b.Property<string>("UserId");

                    b.Property<string>("VoterId");

                    b.HasKey("GrievianceId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoterId");

                    b.ToTable("Grieviances");
                });

            modelBuilder.Entity("Polls.Models.GrievianceReply", b =>
                {
                    b.Property<int>("GrievianceReplyId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GrievianceId");

                    b.Property<string>("Message");

                    b.HasKey("GrievianceReplyId");

                    b.HasIndex("GrievianceId");

                    b.ToTable("GrievianceReplies");
                });

            modelBuilder.Entity("Polls.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CandidateId");

                    b.Property<bool>("HasBeenSeen");

                    b.Property<string>("Message");

                    b.Property<string>("UserId");

                    b.Property<string>("VoterId");

                    b.HasKey("NotificationId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoterId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Polls.Models.Tie", b =>
                {
                    b.Property<int>("TieId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ElectionId");

                    b.HasKey("TieId");

                    b.HasIndex("ElectionId");

                    b.ToTable("Ties");
                });

            modelBuilder.Entity("Polls.Models.Voter", b =>
                {
                    b.Property<string>("VoterId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CandidateId");

                    b.Property<string>("ElectionId");

                    b.Property<bool>("HasVoted");

                    b.Property<string>("UserId");

                    b.Property<DateTime>("WhenIFinished");

                    b.Property<DateTime>("WhenIStartedVoting");

                    b.Property<bool>("WillVoteAgainBecauseOfTie");

                    b.HasKey("VoterId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("ElectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Voters");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Polls.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Polls.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Polls.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Polls.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polls.Models.Candidate", b =>
                {
                    b.HasOne("Polls.Models.Election", "Election")
                        .WithMany("Candidates")
                        .HasForeignKey("ElectionId");

                    b.HasOne("Polls.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Polls.Models.ElectionWinner", b =>
                {
                    b.HasOne("Polls.Models.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId");

                    b.HasOne("Polls.Models.Election", "Election")
                        .WithMany()
                        .HasForeignKey("ElectionId");
                });

            modelBuilder.Entity("Polls.Models.Grieviance", b =>
                {
                    b.HasOne("Polls.Models.Candidate")
                        .WithMany("Grieviances")
                        .HasForeignKey("CandidateId");

                    b.HasOne("Polls.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("Polls.Models.Voter")
                        .WithMany("Grieviances")
                        .HasForeignKey("VoterId");
                });

            modelBuilder.Entity("Polls.Models.GrievianceReply", b =>
                {
                    b.HasOne("Polls.Models.Grieviance", "Grieviance")
                        .WithMany("GrievianceReplies")
                        .HasForeignKey("GrievianceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Polls.Models.Notification", b =>
                {
                    b.HasOne("Polls.Models.Candidate")
                        .WithMany("Notifications")
                        .HasForeignKey("CandidateId");

                    b.HasOne("Polls.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("Polls.Models.Voter")
                        .WithMany("Notifications")
                        .HasForeignKey("VoterId");
                });

            modelBuilder.Entity("Polls.Models.Tie", b =>
                {
                    b.HasOne("Polls.Models.Election", "Election")
                        .WithMany()
                        .HasForeignKey("ElectionId");
                });

            modelBuilder.Entity("Polls.Models.Voter", b =>
                {
                    b.HasOne("Polls.Models.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId");

                    b.HasOne("Polls.Models.Election", "Election")
                        .WithMany("Voters")
                        .HasForeignKey("ElectionId");

                    b.HasOne("Polls.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
